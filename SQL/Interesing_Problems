-----------------------------------
Link:-https://www.hackerrank.com/challenges/occupations/problem?h_r=profile
My answer:- 

select Doctor,Professor,Singer,Actor
from(
select name,occupation,
row_number() over (partition by occupation order by name) as rn
from occupations)
pivot(
min(name)
for occupation in
('Doctor' as Doctor,'Professor' as Professor, 'Singer' as Singer,'Actor' as Actor)
)
order by rn asc;

-------------------------------------

Hierarchical Query a sample:-

select ename,job, prior ename, level
from emp
start with mgr is null
connect by  prior empno = mgr
order by level;


SELECT last_name, employee_id, manager_id, LEVEL
      FROM employees
      START WITH employee_id = 100
      CONNECT BY PRIOR employee_id = manager_id
      ORDER SIBLINGS BY last_name;



 Link for all the related uses of connect by :- https://livesql.oracle.com/apex/livesql/file/tutorial_GQMLEEPG5ARVSIFGQRD3SES92.html     
-----------------------------------------
Recursive With an Example:-

with org_chart (
  employee_id, first_name, last_name, manager_id
) as (
  select employee_id, first_name, last_name, manager_id 
  from   employees
  where  manager_id is null
  union  all
  select e.employee_id, e.first_name, e.last_name, e.manager_id 
  from   org_chart oc
  join   employees e
  on     e.manager_id = oc.employee_id
)
  select * from org_chart;

with org_chart (
  employee_id, first_name, last_name, hire_date, manager_id, lvl
) as (
  select employee_id, first_name, last_name, hire_date, manager_id, 1 lvl
  from   employees
  where  manager_id is null
  union  all
  select e.employee_id, e.first_name, e.last_name, e.hire_date, e.manager_id, oc.lvl + 1
  from   org_chart oc
  join   employees e
  on     e.manager_id = oc.employee_id
) search breadth first by hire_date set hire_seq
  select * from org_chart
  order  by hire_seq;


select employee_id, first_name, last_name, manager_id,
       connect_by_root last_name,
       sys_connect_by_path ( last_name, ', ') chart,
       connect_by_isleaf is_leaf
from   employees
start with manager_id is null
connect by prior employee_id = manager_id;


-------------------------------------------
What I practised post learning:-

with roster(employee_id,last_name,manager_name) as 
(
select employee_id,last_name,null as manager_name
from emp_details_view
where manager_id is null
union all
select b.employee_id, b.last_name, a.last_name
from roster a join emp_details_view b
on 
a.employee_id = b.manager_id
)
search depth first by last_name set seq cycle employee_id set looped to 'Y' default 'N'
select *
from roster;



--------------------------------------------

Another practice with extended data

with roster(employee_id,last_name,manager_name,lvl) as 
(
select employee_id,last_name,null as manager_name,1
from emp_details_view
where manager_id is null
union all
select b.employee_id, b.last_name, a.last_name,a.lvl+1
from roster a join emp_details_view b
on 
a.employee_id = b.manager_id
)
search depth first by employee_id set seq cycle employee_id set looped to 'Y' default 'N'
select employee_id,last_name,manager_name,
case
when lead(lvl,1,0) over (order by seq)<=lvl
then 'LEAF'
else 'Inner'
end node_info
from roster;

--------------------------------------------

Print prime numbers till a number 

select listagg(gg,',')
from
(select case 
when mod(ll,2) = 0
then ll
else 0
end gg
from
(select level as ll
from dual
connect by level < 10) a)b
where b.gg!=0;


-------------------------------------------

Leaf node or not , path to a node using connect by 


select employee_id,last_name ,level,connect_by_isleaf as isleaf, connect_by_root last_name as croot, sys_connect_by_path(last_name,'/') as ehierarchy
from employees
start with manager_id is null
connect by manager_id = prior employee_id;



--------------------------------------------